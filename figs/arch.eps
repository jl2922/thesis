%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.2 (Build 18C54) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 332 176
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 332 176
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: PSMHOX+Roboto-Regular
%!FontType1-1.0: PSMHOX+Roboto-Regular 1.0000.1.0000
14 dict begin/FontName /PSMHOX+Roboto-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /U put
dup 34 /s put
dup 35 /e put
dup 36 /r put
dup 37 /space put
dup 38 /P put
dup 39 /o put
dup 40 /g put
dup 41 /a put
dup 42 /m put
dup 43 /B put
dup 44 /l put
dup 45 /z put
dup 46 /C put
dup 47 /p put
dup 48 /u put
dup 49 /t put
dup 50 /i put
dup 51 /n put
dup 52 /K put
dup 53 /M put
dup 54 /R put
dup 55 /d put
dup 56 /c put
dup 57 /D put
dup 58 /b put
dup 59 /y put
dup 60 /F put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -980 1 index div -555 2 index div 2396 3 index div 2167 5 -1 roll div]cvx def
/sfnts [<






3F0012000173BA000F0012000173BA00B00012000173BA007F0012000173BA000F0012000174BA005F0012000174BA007F0012000175BA00DF0012000174BA006F0012000175BA002F0012000175BA003F0012000175BA00EF0012000174BA009F0012000174BA001F0012000174BA00EF0012000173BA000F0014000173BA001F0014000173BA002F0014000173BA003F0014000173BA005F0014000173BA006F0014000173BA007F0014000173BA00AF0014000173BA008F0014000174BA00AF0014000174BA00BF0014000174BA00CF0014000174BA002F0014000175BA003F00140001750000
00>] def
/CharStrings 32 dict dup begin
/.notdef 0 def
/space 1 def
/B 2 def
/C 3 def
/D 4 def
/F 5 def
/K 6 def
/M 7 def
/P 8 def
/R 9 def
/U 10 def
/a 11 def
/b 12 def
/c 13 def
/d 14 def
/e 15 def
/g 16 def
/i 17 def
/l 18 def
/m 19 def
/n 20 def
/o 21 def
/p 22 def
/r 23 def
/s 24 def
/t 25 def
/u 26 def
/y 27 def
/z 28 def
/ogonek 29 def
/U.smcp 30 def
/Uogonek.smcp 31 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-980 -555 2396 2167}def
/UniqueID 4196781 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF8582693441BFA40888AF905FF75E47F70DE4CD49D4BBBBBA99C8B9C05B033FB8DE22D7D3FF19D06CB555A6AC06A365378D4943652CD0F3F51165FA5F08A351EFEDF345EDCFEF3C151F56CCA897DB8A76B981826ACAA4953845657FC886AFB7954652165B24D29CC6A5C2ABDC33FA3509F82D4E5880931B18355702DF927A4A1E5C8FC4F4E7EDA3497DBBCD67AFCB8FFE30EF9774395212587B5ABB98C35CD445CF73D94861298C5383978B23F07A813F152547C9175258395C74E457EC92F17F85C94F0DA517C0816D1AD249DF38EF57DFD104836CCAE83D1D2851C47DD17E9DEEB8526F20E6547A6F6629AD7F1EE8DA35FDF231F5AA2896AA6921340879A644A43E13B3EF9B1DB5A960F6FAA247D851168EDC0F3A18E3C0DFE46F40BF473E71F9AD78CC0B4D05BBFCD06EEA0BA4C014A45BC08FEBDBC76D72A311075DF2AC6CD6CA98135EB87559E3F3134AC906BB516B4070A0F2B3AF3D14814223D00E06775E6FD7C9FE9370ED7DA9DB84A14AEEFD3E13604B42CBEED52E5E7B7375F5C5458564D052857D70344744B44DAA99DEFE075D87CD5EF8FCE719DE3BBF53409BAC82E2C6AA0A5544F8E490FB0149286E6276D875522B6222AE87FC30FA270EC0DE58BB252CC8EB5395C5ADC11FBA047AF0804350E17307F9175C08C50D62BD650D086815B121D50C397F40DF6393A1173E4DF91575A2B95496DFF4C18CA9680B451FBB6E8FCCBF62BD8094720947EB1884063DB134BE4B6D104403116EB97A3327B78EF6C418148E2168FFD95A5FE3AA72C0AC3E02E7EF008



B07B574BAF8577C71445502F686570EE2A2BCF90799DBE10A0F608DFA17F6F845DAE5C2A4AD8722CDB0FC53EF31F33981B646B1243C114E8323F16C321FE2B286F360D28D2F1BF503DE561BB92930DD78EAB025021977FF13B910BE0D68CFF2B48101F46E29143D14F1FE1430BF69D2DA838405C7F005FC4917212FB1A6C97957A4B9A9847152E6A4648694D2DAAEAAD16D14C9BDBEFA95FCE58E8223B378453963B3665A465CFF91C2D9CEA6571922C6ED14FAB282802B1AB0F7A15487B0E6076AB82E28FD14B80CA31B3E960A02745DE3C2657D9B6971B7227643D0132546D792B6E72F014E1186CFAC210C993B1440E2D337EED5805F104D8FB216C20139A562034F2F2D00129E5621DCFD7286188E770AC8B0A0980DB5F644CD6DCEFBADF6E42A0509E007BFD55473A454563647751F487E87D42B3122F42AF68E79CF6C9D5014E95C675E8D31F80DF0EDB3A44CF4D370620B4B1CF1DC0C4D6D9C071090A9961853D26C337C134C49DA1BF2E738F4223E085A0ED2661954B63C0068468CC1F8FE1BF2DDECE9D090B6989BAAF02843E580B2FA2A1CAD7FC65C581A4FD0B4F2922B9BC79DEB1A90906FA32E9067972CCBE5E89DECE6BE721D574A096BD874096B8DE94373198B318082BDD895915BD248BB94851B2BC7EA3AA09C70087C64C4213B170558DB56E08C92C6289CBD5839B6DFEEA00C13B7995A92C5F302392218C15F38FC522073FD9477EA30634BA36D2471E3BF7EB89B2C28693CC343DEBF8625A8EB837A1080F5B1CA52AACCE9B616E1BCC0A314691777424CF3728BD79A1D590BF6292E149BD4C56607F95A3923842E5A38C407C7A40A2015BCB75E30A4A27D7EC3C85E2A2F503FBC857C50175C8D4383C7865AC2E7A16F85E0D9634DC59082DA80117243A5DA539DAD628C542754342840387474D8E568EB67C28D04AC16A801D072194CED79379CC978985CBA50AFC285BCDDB620C088E588502B59C6D383A6F7EE5BAD90D66E107881E4C1C0EF970DD4914D8597B9617
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/PSMHOX+Roboto-Regular cguidfix
/F1.1/PSMHOX+Roboto-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
1 J
0.60000002 i
/Cs1 SC
0.60000002 0.60000002 0.60000002 sc
q
36 133 m
36 113 l
78 113 l
78 133 l
h
W
36 113 42 20 rc
0 -1 1 0 50.5 132 cm
0 6.5 m
16.947205 6.5 l
S
Q
q
36 133 m
36 113 l
78 113 l
78 133 l
h
W
56.269749 114.6977 m
56.673779 113.66871 57.330456 113.67281 57.732872 114.6977 c
59.906429 120.23336 l
60.310463 121.26236 59.848732 121.67366 58.883221 121.15636 c
58.755367 121.08787 l
57.786236 120.56863 56.211647 120.57057 55.246513 121.08787 c
55.11871 121.15636 l
54.149956 121.6756 53.693771 121.25825 54.096188 120.23336 c
56.269749 114.6977 l
h
W*
36 113 42 20 rc
48.949932 126.37984 m
48.949932 108.9275 l
65.052818 108.9275 l
65.052818 126.37984 l
h
f
Q
q
145 133 m
145 113 l
187 113 l
187 133 l
h
W
145 113 42 20 rc
0 -1 1 0 159.5 132 cm
0 6.5 m
16.947205 6.5 l
S
Q
q
145 133 m
145 113 l
187 113 l
187 133 l
h
W
165.26974 114.6977 m
165.67378 113.66871 166.33046 113.67281 166.73288 114.6977 c
168.90643 120.23336 l
169.31046 121.26236 168.84874 121.67366 167.88322 121.15636 c
167.75537 121.08787 l
166.78624 120.56863 165.21164 120.57057 164.24652 121.08787 c
164.11871 121.15636 l
163.14996 121.6756 162.69377 121.25825 163.09619 120.23336 c
165.26974 114.6977 l
h
W*
145 113 42 20 rc
157.94994 126.37984 m
157.94994 108.9275 l
174.05281 108.9275 l
174.05281 126.37984 l
h
f
Q
q
254 64 m
254 44 l
296 44 l
296 64 l
h
W
254 44 42 20 rc
0 -1 1 0 268.5 63 cm
0 6.5 m
16.947205 6.5 l
S
Q
q
254 64 m
254 44 l
296 44 l
296 64 l
h
W
274.26974 45.697701 m
274.67377 44.668705 275.33044 44.672817 275.73288 45.697701 c
277.90643 51.233364 l
278.31046 52.262356 277.84872 52.673656 276.88321 52.156364 c
276.75537 52.087864 l
275.78622 51.56863 274.21164 51.570572 273.24652 52.087864 c
273.11871 52.156364 l
272.14996 52.675598 271.69379 52.258247 272.09619 51.233364 c
274.26974 45.697701 l
h
W*
254 44 42 20 rc
266.94992 57.379837 m
266.94992 39.927494 l
283.05283 39.927494 l
283.05283 57.379837 l
h
f
Q
q
254 133 m
254 113 l
296 113 l
296 133 l
h
W
254 113 42 20 rc
0 -1 1 0 268.5 132 cm
0 6.5 m
16.947205 6.5 l
S
Q
q
254 133 m
254 113 l
296 113 l
296 133 l
h
W
274.26974 114.6977 m
274.67377 113.66871 275.33044 113.67281 275.73288 114.6977 c
277.90643 120.23336 l
278.31046 121.26236 277.84872 121.67366 276.88321 121.15636 c
276.75537 121.08787 l
275.78622 120.56863 274.21164 120.57057 273.24652 121.08787 c
273.11871 121.15636 l
272.14996 121.6756 271.69379 121.25825 272.09619 120.23336 c
274.26974 114.6977 l
h
W*
254 113 42 20 rc
266.94992 126.37984 m
266.94992 108.9275 l
283.05283 108.9275 l
283.05283 126.37984 l
h
f
Q
q
145 64 m
145 44 l
187 44 l
187 64 l
h
W
145 44 42 20 rc
0 -1 1 0 159.5 63 cm
0 6.5 m
16.947205 6.5 l
S
Q
q
145 64 m
145 44 l
187 44 l
187 64 l
h
W
165.26974 45.697701 m
165.67378 44.668705 166.33046 44.672817 166.73288 45.697701 c
168.90643 51.233364 l
169.31046 52.262356 168.84874 52.673656 167.88322 52.156364 c
167.75537 52.087864 l
166.78624 51.56863 165.21164 51.570572 164.24652 52.087864 c
164.11871 52.156364 l
163.14996 52.675598 162.69377 52.258247 163.09619 51.233364 c
165.26974 45.697701 l
h
W*
145 44 42 20 rc
157.94994 57.379837 m
157.94994 39.927494 l
174.05281 39.927494 l
174.05281 57.379837 l
h
f
Q
q
36 64 m
36 44 l
78 44 l
78 64 l
h
W
36 44 42 20 rc
0 -1 1 0 50.5 63 cm
0 6.5 m
16.947205 6.5 l
S
Q
q
36 64 m
36 44 l
78 44 l
78 64 l
h
W
56.269749 45.697701 m
56.673779 44.668705 57.330456 44.672817 57.732872 45.697701 c
59.906429 51.233364 l
60.310463 52.262356 59.848732 52.673656 58.883221 52.156364 c
58.755367 52.087864 l
57.786236 51.56863 56.211647 51.570572 55.246513 52.087864 c
55.11871 52.156364 l
54.149956 52.675598 53.693771 52.258247 54.096188 51.233364 c
56.269749 45.697701 l
h
W*
36 44 42 20 rc
48.949932 57.379837 m
48.949932 39.927494 l
65.052818 39.927494 l
65.052818 57.379837 l
h
f
Q
q
100 66 m
100 110 l
121 110 l
121 66 l
h
W
100.5 66.5 m
120.5 66.5 l
120.5 109.5 l
100.5 109.5 l
h
W
0 0 332 176 rc
1 0 0 1 101.5 81 cm
0 7 m
16.947205 7 l
S
Q
q
100 66 m
100 110 l
121 110 l
121 66 l
h
W
100.5 66.5 m
120.5 66.5 l
120.5 109.5 l
100.5 109.5 l
h
W
118.8023 87.269745 m
119.83129 87.673775 119.82719 88.330452 118.8023 88.732872 c
113.26664 90.906433 l
112.23764 91.310463 111.82634 90.848732 112.34364 89.883224 c
112.41213 89.755371 l
112.93137 88.786232 112.92943 87.211647 112.41213 86.246513 c
112.34364 86.118713 l
111.8244 85.149956 112.24175 84.693771 113.26664 85.096191 c
118.8023 87.269745 l
h
W*
0 0 332 176 rc
107.12016 79.949928 m
124.5725 79.949928 l
124.5725 96.052818 l
107.12016 96.052818 l
h
f
Q
q
232 66 m
232 110 l
211 110 l
211 66 l
h
W
231.5 66.5 m
211.5 66.5 l
211.5 109.5 l
231.5 109.5 l
h
W
0 0 332 176 rc
-1 0 0 1 230.5 81 cm
0 7 m
16.947205 7 l
S
Q
q
232 66 m
232 110 l
211 110 l
211 66 l
h
W
231.5 66.5 m
211.5 66.5 l
211.5 109.5 l
231.5 109.5 l
h
W
213.19769 87.269745 m
212.1687 87.673775 212.17282 88.330452 213.19769 88.732872 c
218.73337 90.906433 l
219.76236 91.310463 220.17366 90.848732 219.65637 89.883224 c
219.58786 89.755371 l
219.06863 88.786232 219.07057 87.211647 219.58786 86.246513 c
219.65637 86.118713 l
220.1756 85.149956 219.75824 84.693771 218.73337 85.096191 c
213.19769 87.269745 l
h
W*
0 0 332 176 rc
224.87984 79.949928 m
207.42749 79.949928 l
207.42749 96.052818 l
224.87984 96.052818 l
h
f
Q
0.98039216 0.83529413 0.42745098 sc
q
-7.5 185.5 m
339.5 185.5 l
339.5 111.5 l
-7.5 111.5 l
h
16 164.5 m
316 164.5 l
317.38071 164.5 318.5 163.38071 318.5 162 c
318.5 135 l
318.5 133.61929 317.38071 132.5 316 132.5 c
16 132.5 l
14.619288 132.5 13.5 133.61929 13.5 135 c
13.5 162 l
13.5 163.38071 14.619288 164.5 16 164.5 c
h
16 165.5 m
14.067003 165.5 12.5 163.933 12.5 162 c
12.5 135 l
12.5 133.067 14.067003 131.5 16 131.5 c
316 131.5 l
317.93298 131.5 319.5 133.067 319.5 135 c
319.5 162 l
319.5 163.933 317.93298 165.5 316 165.5 c
16 165.5 l
h
W*
16 165 m
316 165 l
317.65686 165 319 163.65686 319 162 c
319 135 l
319 133.34314 317.65686 132 316 132 c
16 132 l
14.343145 132 13 133.34314 13 135 c
13 162 l
13 163.65686 14.343145 165 16 165 c
h
W*
0 0 332 176 rc
16 165 m
316 165 l
317.65686 165 319 163.65686 319 162 c
319 135 l
319 133.34314 317.65686 132 316 132 c
16 132 l
14.343145 132 13 133.34314 13 135 c
13 162 l
13 163.65686 14.343145 165 16 165 c
h
f
Q
2 w
0 J
0 0 0 sc
q
16 165 m
316 165 l
317.65686 165 319 163.65686 319 162 c
319 135 l
319 133.34314 317.65686 132 316 132 c
16 132 l
14.343145 132 13 133.34314 13 135 c
13 162 l
13 163.65686 14.343145 165 16 165 c
h
W*
0 0 332 176 rc
1 0 0 -1 13 165 cm
3 0 m
303 0 l
304.65686 0 306 1.3431457 306 3 c
306 30 l
306 31.656855 304.65686 33 303 33 c
3 33 l
1.3431457 33 0 31.656855 0 30 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
0.58039218 0.80392158 0.85882354 sc
q
-7.5 65.5 m
339.5 65.5 l
339.5 -8.5 l
-7.5 -8.5 l
h
16 44.5 m
316 44.5 l
317.38071 44.5 318.5 43.380711 318.5 42 c
318.5 15 l
318.5 13.619288 317.38071 12.5 316 12.5 c
16 12.5 l
14.619288 12.5 13.5 13.619288 13.5 15 c
13.5 42 l
13.5 43.380711 14.619288 44.5 16 44.5 c
h
16 45.5 m
14.067003 45.5 12.5 43.932995 12.5 42 c
12.5 15 l
12.5 13.067003 14.067003 11.5 16 11.5 c
316 11.5 l
317.93298 11.5 319.5 13.067003 319.5 15 c
319.5 42 l
319.5 43.932995 317.93298 45.5 316 45.5 c
16 45.5 l
h
W*
16 45 m
316 45 l
317.65686 45 319 43.656853 319 42 c
319 15 l
319 13.343145 317.65686 12 316 12 c
16 12 l
14.343145 12 13 13.343145 13 15 c
13 42 l
13 43.656853 14.343145 45 16 45 c
h
W*
0 0 332 176 rc
16 45 m
316 45 l
317.65686 45 319 43.656853 319 42 c
319 15 l
319 13.343145 317.65686 12 316 12 c
16 12 l
14.343145 12 13 13.343145 13 15 c
13 42 l
13 43.656853 14.343145 45 16 45 c
h
f
Q
0 0 0 sc
q
16 45 m
316 45 l
317.65686 45 319 43.656853 319 42 c
319 15 l
319 13.343145 317.65686 12 316 12 c
16 12 l
14.343145 12 13 13.343145 13 15 c
13 42 l
13 43.656853 14.343145 45 16 45 c
h
W*
0 0 332 176 rc
1 0 0 -1 13 45 cm
3 0 m
303 0 l
304.65686 0 306 1.3431457 306 3 c
306 30 l
306 31.656855 304.65686 33 303 33 c
3 33 l
1.3431457 33 0 31.656855 0 30 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 176 rc
1 0 0 -1 94 159 cm
/F1.1[ 13 0 0 -13 0 0]sf
31.245947 14 m
(!"#$%&$'\($\)*)[ 8.960352 6.960840 7.037012 4.618555 3.393457 8.490625 4.491602 7.551172 7.551172 4.618555 7.309961 0.000000 ] xS
1 0 0 -1 22 38 cm
48.572315 14 m
(+,\)-#%&\)$\),,#,%.'*/0123\(%4#$3#,)[ 8.471582 3.437891 7.309961 6.599023 7.037012 3.393457 8.420801 7.309961 4.618555 7.309961 3.437891 3.437891 7.037012 3.437891 3.393457 8.395410 7.551172 11.524805 7.551172 7.551172 4.656641 3.437891 7.551172 7.551172 3.393457 8.357324 7.037012 4.618555 7.551172 7.037012 0.000000 ] xS
Q
q
16 114 m
98 114 l
99.656853 114 101 112.65685 101 111 c
101 66 l
101 64.343147 99.656853 63 98 63 c
16 63 l
14.343145 63 13 64.343147 13 66 c
13 111 l
13 112.65685 14.343145 114 16 114 c
h
W*
0 0 332 176 rc
1 0 0 -1 13 114 cm
3 0 m
85 0 l
86.656853 0 88 1.3431457 88 3 c
88 48 l
88 49.656853 86.656853 51 85 51 c
3 51 l
1.3431457 51 0 49.656853 0 48 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 176 rc
1 0 0 -1 42 100 cm
/F1.1[ 13 0 0 -13 0 0]sf
0 14 m
(5\)/)[ 11.581934 7.309961 0.000000 ] xS
Q
0.76862746 0.83529413 0.63529414 sc
q
-7.5 134.5 m
121.5 134.5 l
121.5 42.5 l
-7.5 42.5 l
h
16 113.5 m
98 113.5 l
99.380714 113.5 100.5 112.38071 100.5 111 c
100.5 66 l
100.5 64.619286 99.380714 63.5 98 63.5 c
16 63.5 l
14.619288 63.5 13.5 64.619286 13.5 66 c
13.5 111 l
13.5 112.38071 14.619288 113.5 16 113.5 c
h
16 114.5 m
14.067003 114.5 12.5 112.933 12.5 111 c
12.5 66 l
12.5 64.067001 14.067003 62.5 16 62.5 c
98 62.5 l
99.932999 62.5 101.5 64.067001 101.5 66 c
101.5 111 l
101.5 112.933 99.932999 114.5 98 114.5 c
16 114.5 l
h
W*
16 114 m
98 114 l
99.656853 114 101 112.65685 101 111 c
101 66 l
101 64.343147 99.656853 63 98 63 c
16 63 l
14.343145 63 13 64.343147 13 66 c
13 111 l
13 112.65685 14.343145 114 16 114 c
h
W*
0 0 332 176 rc
16 114 m
98 114 l
99.656853 114 101 112.65685 101 111 c
101 66 l
101 64.343147 99.656853 63 98 63 c
16 63 l
14.343145 63 13 64.343147 13 66 c
13 111 l
13 112.65685 14.343145 114 16 114 c
h
f
Q
0 0 0 sc
q
16 114 m
98 114 l
99.656853 114 101 112.65685 101 111 c
101 66 l
101 64.343147 99.656853 63 98 63 c
16 63 l
14.343145 63 13 64.343147 13 66 c
13 111 l
13 112.65685 14.343145 114 16 114 c
h
W*
0 0 332 176 rc
1 0 0 -1 13 114 cm
3 0 m
85 0 l
86.656853 0 88 1.3431457 88 3 c
88 48 l
88 49.656853 86.656853 51 85 51 c
3 51 l
1.3431457 51 0 49.656853 0 48 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 176 rc
1 0 0 -1 13 107 cm
/F1.1[ 13 0 0 -13 0 0]sf
27.572266 14 m
(+,\)-#)[ 8.471582 3.437891 7.309961 6.599023 0.000000 ] xS
8.2709475 32 m
(5\)/6#708#)[ 11.581934 7.309961 7.551172 8.776270 7.037012 7.551172 7.551172 7.062402 0.000000 ] xS
Q
q
123 114 m
209 114 l
210.65686 114 212 112.65685 212 111 c
212 66 l
212 64.343147 210.65686 63 209 63 c
123 63 l
121.34315 63 120 64.343147 120 66 c
120 111 l
120 112.65685 121.34315 114 123 114 c
h
W*
0 0 332 176 rc
1 0 0 -1 120 114 cm
3 0 m
89 0 l
90.656853 0 92 1.3431457 92 3 c
92 48 l
92 49.656853 90.656853 51 89 51 c
3 51 l
1.3431457 51 0 49.656853 0 48 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 176 rc
1 0 0 -1 151 99 cm
/F1.1[ 13 0 0 -13 0 0]sf
0 14 m
(5\)/)[ 11.581934 7.309961 0.000000 ] xS
Q
0.76862746 0.83529413 0.63529414 sc
q
99.5 134.5 m
232.5 134.5 l
232.5 42.5 l
99.5 42.5 l
h
123 113.5 m
209 113.5 l
210.38071 113.5 211.5 112.38071 211.5 111 c
211.5 66 l
211.5 64.619286 210.38071 63.5 209 63.5 c
123 63.5 l
121.61929 63.5 120.5 64.619286 120.5 66 c
120.5 111 l
120.5 112.38071 121.61929 113.5 123 113.5 c
h
123 114.5 m
121.067 114.5 119.5 112.933 119.5 111 c
119.5 66 l
119.5 64.067001 121.067 62.5 123 62.5 c
209 62.5 l
210.933 62.5 212.5 64.067001 212.5 66 c
212.5 111 l
212.5 112.933 210.933 114.5 209 114.5 c
123 114.5 l
h
W*
123 114 m
209 114 l
210.65686 114 212 112.65685 212 111 c
212 66 l
212 64.343147 210.65686 63 209 63 c
123 63 l
121.34315 63 120 64.343147 120 66 c
120 111 l
120 112.65685 121.34315 114 123 114 c
h
W*
0 0 332 176 rc
123 114 m
209 114 l
210.65686 114 212 112.65685 212 111 c
212 66 l
212 64.343147 210.65686 63 209 63 c
123 63 l
121.34315 63 120 64.343147 120 66 c
120 111 l
120 112.65685 121.34315 114 123 114 c
h
f
Q
0 0 0 sc
q
123 114 m
209 114 l
210.65686 114 212 112.65685 212 111 c
212 66 l
212 64.343147 210.65686 63 209 63 c
123 63 l
121.34315 63 120 64.343147 120 66 c
120 111 l
120 112.65685 121.34315 114 123 114 c
h
W*
0 0 332 176 rc
1 0 0 -1 120 114 cm
3 0 m
89 0 l
90.656853 0 92 1.3431457 92 3 c
92 48 l
92 49.656853 90.656853 51 89 51 c
3 51 l
1.3431457 51 0 49.656853 0 48 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 176 rc
1 0 0 -1 120 107 cm
/F1.1[ 13 0 0 -13 0 0]sf
12.907763 14 m
(92"1$2:01#7)[ 8.725488 3.437891 6.960840 4.656641 4.618555 3.437891 7.551172 7.551172 4.656641 7.037012 0.000000 ] xS
13.465088 32 m
(.'31\)23#$")[ 8.395410 7.551172 7.551172 4.656641 7.309961 3.437891 7.551172 7.037012 4.618555 0.000000 ] xS
Q
q
234 114 m
316 114 l
317.65686 114 319 112.65685 319 111 c
319 66 l
319 64.343147 317.65686 63 316 63 c
234 63 l
232.34314 63 231 64.343147 231 66 c
231 111 l
231 112.65685 232.34314 114 234 114 c
h
W*
0 0 332 176 rc
1 0 0 -1 231 114 cm
3 0 m
85 0 l
86.656853 0 88 1.3431457 88 3 c
88 48 l
88 49.656853 86.656853 51 85 51 c
3 51 l
1.3431457 51 0 49.656853 0 48 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 176 rc
1 0 0 -1 260 99 cm
/F1.1[ 13 0 0 -13 0 0]sf
0 14 m
(5\)/)[ 11.581934 7.309961 0.000000 ] xS
Q
0.76862746 0.83529413 0.63529414 sc
q
210.5 134.5 m
339.5 134.5 l
339.5 42.5 l
210.5 42.5 l
h
234 113.5 m
316 113.5 l
317.38071 113.5 318.5 112.38071 318.5 111 c
318.5 66 l
318.5 64.619286 317.38071 63.5 316 63.5 c
234 63.5 l
232.61929 63.5 231.5 64.619286 231.5 66 c
231.5 111 l
231.5 112.38071 232.61929 113.5 234 113.5 c
h
234 114.5 m
232.067 114.5 230.5 112.933 230.5 111 c
230.5 66 l
230.5 64.067001 232.067 62.5 234 62.5 c
316 62.5 l
317.93298 62.5 319.5 64.067001 319.5 66 c
319.5 111 l
319.5 112.933 317.93298 114.5 316 114.5 c
234 114.5 l
h
W*
234 114 m
316 114 l
317.65686 114 319 112.65685 319 111 c
319 66 l
319 64.343147 317.65686 63 316 63 c
234 63 l
232.34314 63 231 64.343147 231 66 c
231 111 l
231 112.65685 232.34314 114 234 114 c
h
W*
0 0 332 176 rc
234 114 m
316 114 l
317.65686 114 319 112.65685 319 111 c
319 66 l
319 64.343147 317.65686 63 316 63 c
234 63 l
232.34314 63 231 64.343147 231 66 c
231 111 l
231 112.65685 232.34314 114 234 114 c
h
f
Q
0 0 0 sc
q
234 114 m
316 114 l
317.65686 114 319 112.65685 319 111 c
319 66 l
319 64.343147 317.65686 63 316 63 c
234 63 l
232.34314 63 231 64.343147 231 66 c
231 111 l
231 112.65685 232.34314 114 234 114 c
h
W*
0 0 332 176 rc
1 0 0 -1 231 114 cm
3 0 m
85 0 l
86.656853 0 88 1.3431457 88 3 c
88 48 l
88 49.656853 86.656853 51 85 51 c
3 51 l
1.3431457 51 0 49.656853 0 48 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 176 rc
1 0 0 -1 231 107 cm
/F1.1[ 13 0 0 -13 0 0]sf
26.356054 14 m
(!12,21;)[ 8.960352 4.656641 3.437891 3.437891 3.437891 4.656641 0.000000 ] xS
14.040967 32 m
(<03812'3")[ 7.595605 7.551172 7.551172 7.062402 4.656641 3.437891 7.551172 7.551172 0.000000 ] xS
ep
end
