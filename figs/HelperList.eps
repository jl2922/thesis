%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 333 180
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 333 180
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: KXJFVO+OpenSans-BoldItalic
%!FontType1-1.0: KXJFVO+OpenSans-BoldItalic 1.0000.1.1010
14 dict begin/FontName /KXJFVO+OpenSans-BoldItalic def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /k put
dup 34 /p put
dup 35 /q put
dup 36 /r put
dup 37 /s put
dup 38 /bar put
dup 39 /H put
dup 40 /space put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1051 1 index div -600 2 index div 2648 3 index div 2189 5 -1 roll div]cvx def
/sfnts [<




00>] def
/CharStrings 11 dict dup begin
/.notdef 0 def
/space 1 def
/H 2 def
/k 3 def
/p 4 def
/q 5 def
/r 6 def
/s 7 def
/bar 8 def
/I 9 def
/Iota 10 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1051 -600 2648 2189}def
/UniqueID 4257092 def
currentdict currentfile eexec


0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/KXJFVO+OpenSans-BoldItalic cguidfix
/F1.1/KXJFVO+OpenSans-BoldItalic renmfont
%RBIBeginFontSubset: KBFPHA+OpenSans-SemiBold
%!FontType1-1.0: KBFPHA+OpenSans-SemiBold 1.0000.1.1010
14 dict begin/FontName /KBFPHA+OpenSans-SemiBold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /zero put
dup 34 /comma put
dup 35 /space put
dup 36 /one put
dup 37 /two put
dup 38 /three put
dup 39 /period put
dup 40 /hyphen put
dup 41 /four put
dup 42 /six put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1196 1 index div -578 2 index div 2583 3 index div 2148 5 -1 roll div]cvx def
/sfnts [<




00>] def
/CharStrings 13 dict dup begin
/.notdef 0 def
/space 1 def
/comma 2 def
/hyphen 3 def
/period 4 def
/zero 5 def
/one 6 def
/two 7 def
/three 8 def
/four 9 def
/six 10 def
/I 11 def
/Iota 12 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1196 -578 2583 2148}def
/UniqueID 4206268 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5593A4CA8EDA7BA9920B3E316B42F6C580159E4C22CB21F706F3B457B25392E0AE5D00DFB8739238E8F02830A4957BECACD5F6580A570C4C751B8F161BD3BF14A53F399A8E5E8EE7574B26E1C0767297BB86DEBBBEBFBE86BA87F31313FC17AC16DDD46656A41139EF44919BCCDDB3E01293A2FA7A46B0925E11703987F6ECA75C5AD43CDDEF9E1426038EE845EF9E0E6407828913E2D64BF68D0ECAD9A74C11AB5610E90853461A4BBE4047B7C614C6E678BE63DED21DA1CE4EE27ACEBA6A7DADE664730F3B3A09F629AC761C802902E5BA5FA4FC8D423C13D8843D0A924D133B339CF84634EAE457DE774E8BDFFA6C8957AEDE616D6BF7FD981A60403CE2853EB9920108F3ECA425A10AD6018216B4D75A179A79667435A58062F34A95B08D4E6A360F49F1A934ADFA10483D88A9A334CF27982DB062044A1B6649AC2648DFF04A0452350FA305AAD866910CC36761EA49721A6F45596E4E1F7D6E6089AC66938CA437C0C046EFDFC5B2534DDDB20DD09DE5413989CC2DCB6D87BC8B4B3A13AC28F0ADC46D559210445C003A58A82A633816C43C32FF817DBC15D44865B1C96200CD6E8353AEF98FAD353E02A938F878CE9A0752BA9CAE9665FBDBDA7BFB005DBB25BCCCCAF7C3B375ECB64B307A8F077E6C2C5425A70E3D41CF0DBC4707144BF012E48185B4EB1B1D4ABCA68EE02D578EE5699ED62C734BB494FAABD5BAD838049587595E11F23B327B618418BF55284E37ACFA792371726017B90FA38A54A85E6AABC6A1CA93A14D16791BBA27D891B53306A8E0CE49B4A6727B7F9B45476D161D0
1F960E62495C8F356C229680AA9DA20A00187B4F193AA86E6ECB0CB649F344689DFA3F92E79155F0E011215246B17AD01465A8D059449B8627B66C808DF0C60DE6EB709BB519908A64489925AC131919B800D41DEDA82FEEF77E1D73C31EBB04E70EF49D7FFD8C34F87E99FEAD36166688073C14E5D95F733F8F0BECDA64F28A384F45A3DC0EB65F7690F764709899F5CC03E22BF93E0F4554481E93FBB856FCFF7B9D599EAC3751A44E523756D023AEDD1A18C816812D4A8A6BE75C9A1E7E339C02024F3D57020D00100C8593C6049ED8D418103502AB6209A57FD34AAFE1FE90ADD0525C35A06563C7418B23C13364A53BF59CAEE905D9079B17D281CDDF38309BB73E2856933CED043462A287E91629062EA90D4B678D958DABD57083637E032922E5B6C21DB38F7A5BD70994B4CE141A9E519A6CE0730E194E97364F1FF2D6828C64FF1484C16F635C94E3A87D1A54355CB2652CC24C20A89BA6CECF3CD9D912F4860D25096CFDC1E2EA91E6A13C2CDE637E17A5C0AC364A353302E8CA0850AB8E128CE8E7EEF2D200600CBADEA28E1ACB72F25DAAB536CF184B4FBB848B060CF5981C0456188A31D2A870BF942FFCB8289D24A44F83E184CB064D8580DF7A02F0C41314AE56A69E9BAB3CF2E078265087D38C849C6245A3B0FDB0FE3018E132C68B15F88AB505964AA7E93D6C21D534D62185B1E176738034434560EC83EFDBC918720890C32057E360AD504CAAB45A968E72FC078CEB76520F463F83F1C92E734147AD01451EAAC919C34030B88B4CD7E5B1DAAA29D3B2BE4A81FFF15AB633CB7D19EC6910AB5277FFECEE95A67EDFB4D174B94BFB355830247EB8091AC11415926603A2BCE7E9B6B3849CC6EAD8F78F8637D69D3629A84A4EAE76279850575CF9CFDE5DCCCF7C43BFC2C217554FBD79C83ADDF240E90CE809C9AEDC4AB1DE4ABB1685EB94FC85734849D495FA5157400ACE610E2A510EAD079F79FE7AC143807B5C3C772C9B8A30BCF7B15F7972D84AF7DA92491BFAFBB044F8FA80C7AF6F580CAE89FF401D567908404C05336186F2DED3732658CB459AAC5E8ECA8948CF2AD116253A6475F7931A543197D21940DEA7BFA818EA8D66264478414BA249E0A4BCAF181AFAF20FE19D1858F8E033B849FD42DADC9D2C23A9E21444695395D30891B34450D3D5FC693920A79F8A7DB2384DFC54E43B2D3A1E688449A8C4E2787D6053531204AD49362716F8EA94E778DEB8B3E37ED6272E4FE53E611CC6F85A1036AEEC425769E4C9B781B6E5AF281AD1FB2F790822A770
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/KBFPHA+OpenSans-SemiBold cguidfix
/F2.1/KBFPHA+OpenSans-SemiBold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
1 J
0.60000002 i
/Cs1 SC
0.60000002 0.60000002 0.60000002 sc
q
124.66434 152.08716 m
196.39037 145.81194 l
192.72983 103.97176 l
121.00381 110.24698 l
h
W
0 0 332 180 rc
0.99619472 -0.087155744 -0.087155744 -0.99619472 124.39678 137.55518 cm
0 6.5 m
68.785713 6.5 l
S
Q
q
124.66434 152.08716 m
196.39037 145.81194 l
192.72983 103.97176 l
121.00381 110.24698 l
h
W
192.9325 125.76729 m
193.92236 125.27512 193.86104 124.62129 192.80498 124.30974 c
187.10094 122.62691 l
186.04065 122.3141 185.67116 122.80992 186.27063 123.72667 c
186.35002 123.84807 l
186.95174 124.76826 187.08704 126.33703 186.65584 127.34357 c
186.59874 127.47686 l
186.16591 128.48718 186.62143 128.90526 187.60735 128.41504 c
192.9325 125.76729 l
h
W*
0 0 332 180 rc
181.93279 134.07742 m
199.31871 132.55635 l
197.91525 116.51474 l
180.52933 118.03581 l
h
f
Q
q
112.01025 131.96466 m
183.83487 136.98712 l
186.76463 95.089439 l
114.94003 90.066971 l
h
W
0 0 332 180 rc
0.99756408 0.069756471 0.069756471 -0.99756408 114.01929 117.56974 cm
0 6.5 m
68.785713 6.5 l
S
Q
q
112.01025 131.96466 m
183.83487 136.98712 l
186.76463 95.089439 l
114.94003 90.066971 l
h
W
183.55525 116.64833 m
184.60992 116.31706 184.65163 115.6617 183.65732 115.18877 c
178.28676 112.63436 l
177.28845 112.15953 176.84595 112.59145 177.29463 113.59069 c
177.35403 113.72301 l
177.80441 114.726 177.69263 116.29662 177.10927 117.22332 c
177.03203 117.34603 l
176.44649 118.27621 176.83099 118.76039 177.88145 118.43044 c
183.55525 116.64833 l
h
W*
0 0 332 180 rc
171.39096 123.13541 m
188.8008 124.35283 l
189.92407 108.28916 l
172.51425 107.07175 l
h
f
Q
q
102.00548 110.57848 m
173.61105 118.10453 l
178.00125 76.33461 l
106.39568 68.808563 l
h
W
0 0 332 180 rc
0.99452192 0.10452846 0.10452846 -0.99452192 104.51566 96.262444 cm
0 6.5 m
68.785713 6.5 l
S
Q
q
102.00548 110.57848 m
173.61105 118.10453 l
178.00125 76.33461 l
106.39568 68.808563 l
h
W
174.04143 97.768364 m
175.10701 97.474106 175.17157 96.820595 174.19437 96.313255 c
168.91621 93.572968 l
167.93509 93.063591 167.47778 93.479797 167.89133 94.494087 c
167.94608 94.628403 l
168.36118 95.6465 168.19464 97.212265 167.5793 98.118034 c
167.49782 98.237984 l
166.88017 99.147156 167.24754 99.644463 168.30888 99.351379 c
174.04143 97.768364 l
h
W*
0 0 332 180 rc
161.65816 103.82697 m
179.01489 105.65123 l
180.69809 89.636559 l
163.34135 87.812294 l
h
f
Q
0.76862746 0.83529413 0.63529414 sc
q
26 168 m
125 168 l
125 12 l
26 12 l
26 168 l
h
W*
0 0 332 180 rc
26 168 m
125 168 l
125 12 l
26 12 l
26 168 l
h
f
Q
2 w
0 J
0 0 0 sc
q
26 168 m
125 168 l
125 12 l
26 12 l
26 168 l
h
W*
0 0 332 180 rc
1 0 0 -1 26 168 cm
0 0 m
99 0 l
99 156 l
0 156 l
0 0 l
h
S
Q
q
0 0 332 180 rc
1 0 0 -1 66 166 cm
/F1.1[ 14 0 0 -14 0 0]sf
0.024902344 15 m
(!)s
1 0 0 -1 74 160 cm
/F1.1[ 10 0 0 -10 0 0]sf
0.052734375 11 m
("#)[ 5.952148 0.000000 ] xS
1 w
2 J
1 0 0 -1 26 142 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 26 122 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 26 102 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 26 82 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 54 139 cm
/F2.1[ 10 0 0 -10 0 0]sf
8.1694336 11 m
(!"#!"#$)[ 5.708008 2.670898 2.597656 5.708008 2.670898 2.597656 0.000000 ] xS
1 0 0 -1 54 119 cm
8.1694336 11 m
(!"#!"#%)[ 5.708008 2.670898 2.597656 5.708008 2.670898 2.597656 0.000000 ] xS
1 0 0 -1 54 99 cm
8.1694336 11 m
(!"#!"#&)[ 5.708008 2.670898 2.597656 5.708008 2.670898 2.597656 0.000000 ] xS
1 0 0 -1 65 79 cm
4.2788086 11 m
('#'#')[ 2.749023 2.597656 2.749023 2.597656 0.000000 ] xS
Q
0.98039216 0.83529413 0.42745098 sc
q
193 130 m
292 130 l
292 31 l
193 31 l
193 130 l
h
W*
0 0 332 180 rc
193 130 m
292 130 l
292 31 l
193 31 l
193 130 l
h
f
Q
0 0 0 sc
q
193 130 m
292 130 l
292 31 l
193 31 l
193 130 l
h
W*
0 0 332 180 rc
1 0 0 -1 193 130 cm
0 0 m
99 0 l
99 99 l
0 99 l
0 0 l
h
S
Q
q
0 0 332 180 rc
1 0 0 -1 242 122 cm
/F1.1[ 10 0 0 -10 0 0]sf
0.029785156 11 m
($%)[ 4.208984 0.000000 ] xS
1 w
2 J
1 0 0 -1 193 104 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 193 84 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 193 64 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 221 101 cm
/F2.1[ 10 0 0 -10 0 0]sf
8.1694336 11 m
(!"#!"#$)[ 5.708008 2.670898 2.597656 5.708008 2.670898 2.597656 0.000000 ] xS
1 0 0 -1 221 81 cm
8.1694336 11 m
(!"#!"#%)[ 5.708008 2.670898 2.597656 5.708008 2.670898 2.597656 0.000000 ] xS
1 0 0 -1 232 63 cm
4.2788086 11 m
('#'#')[ 2.749023 2.597656 2.749023 2.597656 0.000000 ] xS
Q
0.98039216 0.83529413 0.42745098 sc
q
184 121 m
283 121 l
283 22 l
184 22 l
184 121 l
h
W*
0 0 332 180 rc
184 121 m
283 121 l
283 22 l
184 22 l
184 121 l
h
f
Q
0 0 0 sc
q
184 121 m
283 121 l
283 22 l
184 22 l
184 121 l
h
W*
0 0 332 180 rc
1 0 0 -1 184 121 cm
0 0 m
99 0 l
99 99 l
0 99 l
0 0 l
h
S
Q
q
0 0 332 180 rc
1 0 0 -1 233 113 cm
/F1.1[ 10 0 0 -10 0 0]sf
0.029785156 11 m
($%)[ 4.208984 0.000000 ] xS
1 w
2 J
1 0 0 -1 184 95 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 184 75 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 184 55 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 212 92 cm
/F2.1[ 10 0 0 -10 0 0]sf
8.1694336 11 m
(!"#!"#$)[ 5.708008 2.670898 2.597656 5.708008 2.670898 2.597656 0.000000 ] xS
1 0 0 -1 212 72 cm
8.1694336 11 m
(!"#!"#%)[ 5.708008 2.670898 2.597656 5.708008 2.670898 2.597656 0.000000 ] xS
1 0 0 -1 223 54 cm
4.2788086 11 m
('#'#')[ 2.749023 2.597656 2.749023 2.597656 0.000000 ] xS
Q
0.98039216 0.83529413 0.42745098 sc
q
175 111 m
274 111 l
274 12 l
175 12 l
175 111 l
h
W*
0 0 332 180 rc
175 111 m
274 111 l
274 12 l
175 12 l
175 111 l
h
f
Q
0 0 0 sc
q
175 111 m
274 111 l
274 12 l
175 12 l
175 111 l
h
W*
0 0 332 180 rc
1 0 0 -1 175 111 cm
0 0 m
99 0 l
99 99 l
0 99 l
0 0 l
h
S
Q
q
0 0 332 180 rc
1 0 0 -1 192 108 cm
/F1.1[ 14 0 0 -14 0 0]sf
0.024902344 15 m
(!)s
1 w
2 J
1 0 0 -1 224 111 cm
1 0.5 m
1 98.5 l
S
1 0 0 -1 200 102 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 11 m
("$)[ 5.952148 0.000000 ] xS
1 0 0 -1 244 102 cm
0 11 m
("#$%)[ 5.952148 5.942383 4.208984 0.000000 ] xS
1 0 0 -1 226 108 cm
/F1.1[ 14 0 0 -14 0 0]sf
0 15 m
(&'\(\(\(\(\(\(&)[ 7.710938 9.802734 3.636719 3.636719 3.636719 3.636719 3.636719 3.636719 0.000000 ] xS
1 0 0 -1 175 85 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 175 65 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 175 45 cm
0.8114754 0.5 m
98.188522 0.5 l
S
1 0 0 -1 185.5 82 cm
/F2.1[ 10 0 0 -10 0 0]sf
0.060546875 11 m
(\($"#!"#!)[ 3.217773 5.708008 2.670898 2.597656 5.708008 2.670898 2.597656 0.000000 ] xS
1 0 0 -1 185.5 62 cm
0.060546875 11 m
(\($"#$"#!)[ 3.217773 5.708008 2.670898 2.597656 5.708008 2.670898 2.597656 0.000000 ] xS
1 0 0 -1 237 62 cm
0.20947266 11 m
(!'\)%%)[ 5.708008 2.749023 5.708008 5.708008 0.000000 ] xS
1 0 0 -1 237 82 cm
0.20947266 11 m
(!'*&&)[ 5.708008 2.749023 5.708008 5.708008 0.000000 ] xS
1 0 0 -1 190 42 cm
4.2788086 11 m
('#'#')[ 2.749023 2.597656 2.749023 2.597656 0.000000 ] xS
1 0 0 -1 238 42 cm
4.2788086 11 m
('#'#')[ 2.749023 2.597656 2.749023 2.597656 0.000000 ] xS
1 0 0 -1 301 80 cm
0.5 0 m
5.5 63.5 l
S
1 0 0 -1 306 80 cm
0.5 63.5 m
6.5 0 l
S
ep
end
