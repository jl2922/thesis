%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.2 (Build 18C54) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 332 242
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 332 242
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: WJLEYH+Roboto-Regular
%!FontType1-1.0: WJLEYH+Roboto-Regular 1.0000.1.0000
14 dict begin/FontName /WJLEYH+Roboto-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /a put
dup 35 /p put
dup 36 /S put
dup 37 /h put
dup 38 /u put
dup 39 /f put
dup 40 /l put
dup 41 /e put
dup 42 /R put
dup 43 /d put
dup 44 /c put
dup 45 /O put
dup 46 /r put
dup 47 /i put
dup 48 /g put
dup 49 /n put
dup 50 /space put
dup 51 /B put
dup 52 /z put
dup 53 /t put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -980 1 index div -555 2 index div 2396 3 index div 2167 5 -1 roll div]cvx def
/sfnts [<




FEE9DFDDFEE8C4A98889A9048DFD01C3DCDCC302FFFD017B8C8B7C02FF000000FFFF0089FE500474048D022600170000000700160176000000010000000100003B5300AD5F0F3CF50019080000000000CC47B83300000000CCAACAFDFC2CFDD5095C0877000000090002000000000000000100000862FDD50000097AFC2CFF3F095C00010000000000000000000000000000001901FD000001FD0000051D00B4070700B405740071054D00B404FD00610466006A043F0061048C0062043B006302C30038048C0064048C008F0204009F0204009F048C008F048C008F02BE008F02C40022048C008B0406005E023200440504008905040089000000000000006000CA011C017E01E4025C02A60302036803B8042C046E049C04B404FA0558059605E6062A0660069606D206DE00010000001900970016005F0005000100000000000C00000200029B00030001B8000B2BB800002B00BA0001000500022B00BF0001005D004C003B0027001A000000082BBF00020049003C002F00220013000000082BBF00030049003C002F00220013000000082BBF00040038002E0024001A000F000000082BBF000500510042003400250016000000082B00BA0006000800072BB8000020457D691844BA00D00008000173BA00200008000174BA00300008000173BA00800008000173BA00700008000173BA005F000A000173BA007F000A000173BA002F000A000174BA004F000A000174BA006F000A000174BA008F000A000174BA00AF000A000174BA007F000A000175BA00FF000A000174BA001F000A000175BA003F000A000175BA005F000A000175BA003F000A000173BA000F000C000173BA007F000C000173BA00EF000C000173BA001F000C000174BA005F000C000174BA008F000C000174BA00CF000C000174BA00FF000C000174BA003F000C000175BA006F000C000175BA00BF000E000173BA002F000E000174BA009F000E000174BA00BF000E000174BA000F000E000175BA002F000E000175BA002F0010000173BA005F0010000173BA00FF0010000173BA00CF0010000174BA003F0012000173BA000F0012000173BA00B00012000173BA007F0012000173BA000F0012000174BA005F0012000174BA007F0012000175BA00DF0012000174BA006F0012000175BA002F0012000175BA003F0012000175BA00EF0012000174BA009F0012000174BA001F0012000174BA00EF0012000173BA000F0014000173BA001F0014000173BA002F0014000173BA003F0014000173BA005F0014000173BA006F0014000173BA007F0014000173BA00AF0014000173BA008F0014000174BA00AF0014000174BA00BF0014000174BA00CF0014000174BA002F0014000175BA003F00140001750000
00>] def
/CharStrings 25 dict dup begin
/.notdef 0 def
/space 1 def
/B 2 def
/M 3 def
/O 4 def
/R 5 def
/S 6 def
/a 7 def
/c 8 def
/d 9 def
/e 10 def
/f 11 def
/g 12 def
/h 13 def
/i 14 def
/l 15 def
/n 16 def
/p 17 def
/r 18 def
/t 19 def
/u 20 def
/z 21 def
/ogonek 22 def
/U.smcp 23 def
/Uogonek.smcp 24 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-980 -555 2396 2167}def
/UniqueID 4196781 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF8582693441BFA40888AF905FF75E47F70DE4CD49D4BBBBBA99C8B9C05B033FB8DE22D7D3FF19D06CB555A6AC06A365378D4943652CD0F3F51165FA5F08A351EFEDF345EDCFEF3C151F56CCA897DB8A76B981826ACAA4953845657FC886AFB7954652165B24D29CC6A5C2ABDC33FA3509F82D4E5880931B18355702DF927A4A1E5C8FC4F4E7EDA3497DBBCD67AFCB8FFE30EF9774395212587B5ABB98C35CD445CF73D94861298C5383978B23F07A813F152547C9175258395C74E457EC92F17F85C94F0DA517C0816D1AD249DF38EF57DFD104836CCAE83D1D2851C47DD17E9DEEB8526F20E6547A6F6629AD7F1EE8DA35FDF231F5AA3BF50FEE6CF761CB3873BC9CC962A728568FBF3DD8327908EF3C05B8EE6B4F79EADB7FB4DF8B7AB2A97B891F581CF58F0F24E4CA96C6D20D581E99BBAF295EF579BEB774FC7A5571F2804EB7063E91C71823251EEF5D91BA8F1EFA83EA98951DC10A0A8C786EAE0EA391300824F436F6CD7B30ECCF24861191CA2E64651999BB1E84B015E8075815C4FB8375932948864A2125F9A6848D62D190B46BD0DB76553AB17030FAD1A8FC631D34A89810319C3757F57CF14875C8A08178E8FFD7AA7632B8A36DF9AD0A611DA25A190998D38D335A9B9A0095587B2D41A4DAE13E6FF6E20F455A01B10FE728BEBAEDF872B5C654CF14611F8A57C08E2804D411A5AB052A3158751402F3DCC32866ADF9A2EF9D64F6C3F8EBBBC5612FD3CB2CA7BED81883B49AFA0FBCF528367C1C3BC88D33317EC18C3F9F5C81B4878CE7C1EF3116C7518
BEC2B61C39F5FD26434E3DEEADDC44ADAE85953D95AAF2D5BB63C8F7901430413B544A01F1975022A010D40D28A476881DF94FBB8EA3481CCD0B459B038A4400C919B385449CF11952F5B8A688949C64185F22C5A290695014B335213CF6517F619F43F462B441EF025B49B9FE5DE15AAAE83F08569A5F417867F68C7DE2DC26732630F6C6347964D7C2F4C19D053A32B1021D9D8B026143D691D7FDCC980266F9423EE04028F99E84012F47F2C2A7024D1623F5A9FADA1918786D9A4C616FAD679AD1B4B188FD43F8B9DC866646ACF076D346556418B51D14C5D1207AFC79F192D0797F5C0AD4DBB7AD978E897BBD1C980C5B67CE7E59F402F42819D543BC0A262A4DB7D78CA3AF54E4582DF1F4B9BB871BF1A2F4C3F23923793B3ADCB895630A3105393C348C352A19451195DCE64F0000DD5F1CF170782DA6E63399F89EF99CEE44583ED7317FF0B522258B140743F2D70CF1804CFC846FDD20B697A9ACEDE5590463A6BD616450C51C4EE71EBB86C5FE5ED21827C8B373263A9632B8C51177EAD65B1B725F64C4605F0536BC464165366EC72111858F6D9E6B570117ED8869FB448FB591D7A6D53BD17984F78DB7D5BA41F20CCD8A6DD61F35F8E6AF8FD523B6227B14C4471C79764B3635B03B2779429EFF5862EC6F32D9F246B481A4B39B2EE2A03E0087904A7A7B2D20E7A42C9846CA908D49964EC23ABA87A50A592476C243F8245F946EE4185C36429B468F93E6492BB04BD6891B572DCC859F50A3DECB1CAB7714B368C5FB86E6F71B44A5C33CB3BC6EA4250ED72E3801B3ABA10B7117A71EC830C70F72DE05016AD811A0295904EBD54FE48453B1EF36D9641979DBCE1F4BD19A2E79F39285DDF11ABD00B883D81955CF1D004527031C4B96843DC40B0D2EAF2265FA1D283BA583A737671B49EE533A8099045AD12663DA350A36C29330CBABF05EA858FD04FB55CEE4AA7AC14364BC15996182653A5FA8CBA26EE082D8B6D0DD2B1BD9B59A9216217C72C2FC6C251D72A5E959375E78C75CCFE09A0B046B1540813B3CD57C9341FB93B78AE10A9B2E259DF531AC36D13177CF3AD6A77FD2B8C38C5E9C194374D904294BB54E078FEBD25E993F28601A561EFB9F7F908123D94705123022BDDE754B74618C892C2FAA2581573B4689A64EFED1C438C20BA1FB36A409C91032712AA17CE932625EF545D9B6E6F7CE8F2627B7BC4D9EBAB4D2DEFE0C9FE72C5B639404E198C77C1853CAFE9AA4592E7DC727B72949ECB4848CC5DEAB1BEDD48C4D7DD8AD9057A63D91E8D2F414A69325DF8491A78987CCEA79181F4FAC957D86E6E06F5E381D765C9ECA78C6BCC0C286D54B60AF713AF8F5991082D4846E64E2A4C14000CD3DE053164E84B1A80C18C9EF0E0F6F0CB7625F4DDD459A94E41F6AC74E7C7C51F6EC26E330C0751571A3C6AF32304430
0A553C4779EFB153764281B830A98D594E0E2BFB602FC037AE1DC239B53E3749D555F75C223716B48C62AE6FE14526316C1908DB5A9173F9F3D438A777FCB738E0BE69EEB47C348F1C5F1A6EFC77A1C058433C54D5D67C8ACCB3758DD42325798B19A774F56D7C7560D08D3AD99D9D76F49D38360E241EBAC46C6FB9BE9E63E87E8A874421F7D8F6906518F0367E5B2948E1FD342422035B813EA43E9E83BADFE339ECB503E3C3BA033B4081E6D51BA0AD3338B2B0E8C3DCCC0F0A54CAFFFC7597370ED0D9DA2B5FEC94DF218AC17900564B3B45508CADA7DA57AD5C507C250523616B25ED5AE0ACB57CBF26BEAD9CC842FCFEDED84113D1ED420AB252C3AEB61A911E3B77905C3F263E88424CDA0913A8D4B88058452B484899AF42C2B2836401B22067E9C8D2260F0B3DCE22040FB6BE3CEAF171970A487BCAD3F9B6519B159DFF103ABA699BC7C6BEC077A722C8D63A1E77CAF7202025186C40D5A746794C2AE0E4BEF3617609D5AED01FE971454FF7A97F4973D9B7FF4196C19A429F8578B1FAAC9D3E1119823A74310CC61892A3BDFF6F88EEE348E8B376A934E9F01470878E9839190E2D51D377DAE95CCB7D220BEB8F8F3C59E70DA3EE9CE1900598896C7F8BDDDD7E061676E0096DF1A2A5DD608A7FD6B70198DC826EA121A995DB2C7C63476EE1DD1240F898A70A14119286708A6307CB30D044D61BA68969579932F7B08D4CAD490C5F7AFB9A25E2874D92438DADF599AAAFAF37C5E11C8B0EEB9B9320792571047C2DF8BCDC0C6DBD94084E6E4AA2DED8FABA82FEC27B54417759D5FA53DBA74B6DA8F31C908844DB67924D71D10A96F4F46E66D9D8F4DC09489D71F03A14DCF3A3911BD33DAB9D4A48D04C9AE04A8EAFCC832334FEA27F72C1E8111E79237674B1DA380E411095641BD554E61A9BEF7FD5A3F13186DF778BE065CD5797B6B9F3860E9A9D403CE99B1D8D9E8E14DCCB30311FC44C9D8B95ABAC716552AF4829D08C27F422163963DDBFF966FA0FD3E6939AE12418EC3058A106D06FC7CCA73D88C680BACB546C04D8D29D53AF565C3A8FE4EFB721FF564041C4EE189D90773319FE62CEFFE97D1D444589E0BEF70AB182D83A3B4EE98322C8E6179EDF6ABE5D5E0DDF40C26130D5F4CC35B38B1B96FE4627A1DE84347DB9C0BD0197B70E2ECF7C5F21092D399016C0126528FEA51B0CAE7C1DA126EB61DE5CF66A361106BFEEA87AB083A61CD178B7C0AA8402B2545EDB8D9417D24A7FEF55E7979D80503CB5596E13BBFCD4B6C4C71085617F9D5D3DA06D132B801EF90632E5271F438C3532E0487FC965425639D66BE9077EC93E7596BAB59CD1BBED76320EA77A3CF5A3FA1F9308095709F921E498983FF8FC347F19D40945035915169F13E10F5624E2DC00484190CE07E90EAF6B3EDBB0455D5A72CFE9850C7E87CB74260B
402A8A7246AFE914D8BC0EFC6D98103AD476B036A6B9C045625FEEB7E14E063BC93995FA05B226AC389447ED6EC1A7371C785471F6905317B702D8EF0A979755A66E2C529F886520420F6731B68BA2D414AD710E50671AFAE5F24CE8307F4396021BE0DD3ACB931DA89E5771C163E748494A346164AD2FCCCFA54FFC3EFB610668119A5F259A21C1D1ED8847056F4ED0E3CD2BD3B220B3C9A70E566DFE75D7CE980C92CC5696B69EC5396D6EAE554B7AFD4D26DBACB4637CFC24321D299871EAB327A8E6E985668C3C2DB226D5ECB18AC3E56580D71288462BF4270780C394356CC41F86ACCFD8518E834E973A273D9A1ECE1BCE8E6E016CBD1888BCB11190DA413F4806BF66F6028780B9AACC460820534E3EA45D7F3465BE9C63ED09BA449921F4C75456740EEEADF2A425503F66452B30F13FDA10C0F3B01E18774D471390B4E55792F64CBE2105B809BE37DAC95026830AEF7BB6E310385A8DA96DDC177A6252CEBA59408B53DEADD9D620A30D6C15151F1C548BCAC4D99214FDFDEF894DC175E0E169854F913354E58C3B55BD44603E8A7C2257DB3519EBCC38F6336AAEC4386385BFB63079AE236451C9A07B082D17C64CBED07FFF86F57709F8EDAB2850223F36621967FDD076E814F305EA2BDCFA797DD46A8BDBCB4384C1BEB0D43B25410E1BB553D9EE55094253F3D5829D608A61D9DE00D1598A1875BB28FE6D2599663135BAD250A5D86CB91C5BF78212906807FB95229DD5513FE29977BA834D2A3567CE7AB64C85225A3E2881F76FECCC834FEEAD5AA2B0394531564806F3CD7B843474F3A02F7ACC5117B087A10D4BC10DEA7142E423A4DB143D09DFA53C05E57398F1C8AAAF07ADC5D043D679859E77183582ECCD6DFD8677B976BADE3C0A5F0CE18882957AA9239253EA094FDD9C737AB477C06AB65BF8AD25DD1C6FFD7FEC891FF6F4E4FB226DC857D5F0F3F46C7D0C1D2F7E53D8F0546004299DC9834A8DF4F46B14DB075A7045931EEBA44AD7383A30EAE16DC889727B880FA860ED64100B649613860B3B3591A3A8DF49EEA966619CD3EB8AFD0F43ABDF984161FE03082169231A7F524609FCBD82899108DB1DEE211F0C633DA12C28C7D3E69FDFB2377D181689E61E304CE816E0C3A3EB7B6A4A005DE598AAC6DD7A20A67B4CF9D014EB5CA301
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/WJLEYH+Roboto-Regular cguidfix
/F1.1/WJLEYH+Roboto-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
1 J
0.60000002 i
/Cs1 SC
0.60000002 0.60000002 0.60000002 sc
q
6 91 m
6 35 l
48 35 l
48 91 l
h
W
0 0 332 242 rc
0 -1 1 0 20.5 90 cm
0 6.5 m
52.835403 6.5 l
S
Q
q
6 91 m
6 35 l
48 35 l
48 91 l
h
W
26.269747 36.697701 m
26.673779 35.668705 27.330456 35.672817 27.732872 36.697701 c
29.906431 42.233364 l
30.310461 43.262356 29.848732 43.673656 28.883223 43.156364 c
28.755369 43.087864 l
27.786236 42.56863 26.211645 42.570572 25.246513 43.087864 c
25.11871 43.156364 l
24.149956 43.675598 23.693771 43.258247 24.096189 42.233364 c
26.269747 36.697701 l
h
W*
0 0 332 242 rc
18.94993 48.379837 m
18.94993 30.927494 l
35.052818 30.927494 l
35.052818 48.379837 l
h
f
Q
q
198 187 m
198 161 l
240 161 l
240 187 l
h
W
0 0 332 242 rc
0 -1 1 0 212.5 186 cm
0 6.5 m
22.928572 6.5 l
S
Q
q
198 187 m
198 161 l
240 161 l
240 187 l
h
W
218.26974 162.69769 m
218.67378 161.6687 219.33046 161.67282 219.73288 162.69769 c
221.90643 168.23337 l
222.31046 169.26236 221.84874 169.67366 220.88322 169.15637 c
220.75537 169.08786 l
219.78624 168.56863 218.21164 168.57057 217.24652 169.08786 c
217.11871 169.15637 l
216.14996 169.6756 215.69377 169.25824 216.09619 168.23337 c
218.26974 162.69769 l
h
W*
0 0 332 242 rc
210.94994 174.37984 m
210.94994 156.92749 l
227.05281 156.92749 l
227.05281 174.37984 l
h
f
Q
q
159 35 m
159 53 l
117 53 l
117 35 l
h
W
0 0 332 242 rc
0 1 -1 0 144.5 36 cm
0 6.5 m
14.953416 6.5 l
S
Q
q
159 35 m
159 53 l
117 53 l
117 35 l
h
W
138.73026 51.302299 m
138.32622 52.331295 137.66954 52.327183 137.26712 51.302299 c
135.09357 45.766636 l
134.68954 44.737644 135.15126 44.326344 136.11678 44.843636 c
136.24463 44.912136 l
137.21376 45.43137 138.78836 45.429428 139.75348 44.912136 c
139.88129 44.843636 l
140.85004 44.324402 141.30623 44.741753 140.90381 45.766636 c
138.73026 51.302299 l
h
W*
0 0 332 242 rc
146.05006 39.620163 m
146.05006 57.072506 l
129.94719 57.072506 l
129.94719 39.620163 l
h
f
Q
q
136 53 m
136 35 l
178 35 l
178 53 l
h
W
0 0 332 242 rc
0 -1 1 0 150.5 52 cm
0 6.5 m
14.953416 6.5 l
S
Q
q
136 53 m
136 35 l
178 35 l
178 53 l
h
W
156.26974 36.697701 m
156.67378 35.668705 157.33046 35.672817 157.73288 36.697701 c
159.90643 42.233364 l
160.31046 43.262356 159.84874 43.673656 158.88322 43.156364 c
158.75537 43.087864 l
157.78624 42.56863 156.21164 42.570572 155.24652 43.087864 c
155.11871 43.156364 l
154.14996 43.675598 153.69377 43.258247 154.09619 42.233364 c
156.26974 36.697701 l
h
W*
0 0 332 242 rc
148.94994 48.379837 m
148.94994 30.927494 l
165.05281 30.927494 l
165.05281 48.379837 l
h
f
Q
q
196 35 m
196 53 l
154 53 l
154 35 l
h
W
0 0 332 242 rc
0 1 -1 0 181.5 36 cm
0 6.5 m
14.953416 6.5 l
S
Q
q
196 35 m
196 53 l
154 53 l
154 35 l
h
W
175.73026 51.302299 m
175.32622 52.331295 174.66954 52.327183 174.26712 51.302299 c
172.09357 45.766636 l
171.68954 44.737644 172.15126 44.326344 173.11678 44.843636 c
173.24463 44.912136 l
174.21376 45.43137 175.78836 45.429428 176.75348 44.912136 c
176.88129 44.843636 l
177.85004 44.324402 178.30623 44.741753 177.90381 45.766636 c
175.73026 51.302299 l
h
W*
0 0 332 242 rc
183.05006 39.620163 m
183.05006 57.072506 l
166.94719 57.072506 l
166.94719 39.620163 l
h
f
Q
q
173 53 m
173 35 l
215 35 l
215 53 l
h
W
0 0 332 242 rc
0 -1 1 0 187.5 52 cm
0 6.5 m
14.953416 6.5 l
S
Q
q
173 53 m
173 35 l
215 35 l
215 53 l
h
W
193.26974 36.697701 m
193.67378 35.668705 194.33046 35.672817 194.73288 36.697701 c
196.90643 42.233364 l
197.31046 43.262356 196.84874 43.673656 195.88322 43.156364 c
195.75537 43.087864 l
194.78624 42.56863 193.21164 42.570572 192.24652 43.087864 c
192.11871 43.156364 l
191.14996 43.675598 190.69377 43.258247 191.09619 42.233364 c
193.26974 36.697701 l
h
W*
0 0 332 242 rc
185.94994 48.379837 m
185.94994 30.927494 l
202.05281 30.927494 l
202.05281 48.379837 l
h
f
Q
q
30 91 m
30 35 l
72 35 l
72 91 l
h
W
0 0 332 242 rc
0 -1 1 0 44.5 90 cm
0 6.5 m
52.835403 6.5 l
S
Q
q
30 91 m
30 35 l
72 35 l
72 91 l
h
W
50.269749 36.697701 m
50.673779 35.668705 51.330456 35.672817 51.732872 36.697701 c
53.906429 42.233364 l
54.310463 43.262356 53.848732 43.673656 52.883221 43.156364 c
52.755367 43.087864 l
51.786236 42.56863 50.211647 42.570572 49.246513 43.087864 c
49.11871 43.156364 l
48.149956 43.675598 47.693771 43.258247 48.096188 42.233364 c
50.269749 36.697701 l
h
W*
0 0 332 242 rc
42.949932 48.379837 m
42.949932 30.927494 l
59.052818 30.927494 l
59.052818 48.379837 l
h
f
Q
q
53 91 m
53 35 l
95 35 l
95 91 l
h
W
0 0 332 242 rc
0 -1 1 0 67.5 90 cm
0 6.5 m
52.835403 6.5 l
S
Q
q
53 91 m
53 35 l
95 35 l
95 91 l
h
W
73.269745 36.697701 m
73.673775 35.668705 74.330452 35.672817 74.732872 36.697701 c
76.906433 42.233364 l
77.310463 43.262356 76.848732 43.673656 75.883224 43.156364 c
75.755371 43.087864 l
74.786232 42.56863 73.211647 42.570572 72.246513 43.087864 c
72.118713 43.156364 l
71.149956 43.675598 70.693771 43.258247 71.096191 42.233364 c
73.269745 36.697701 l
h
W*
0 0 332 242 rc
65.949928 48.379837 m
65.949928 30.927494 l
82.052818 30.927494 l
82.052818 48.379837 l
h
f
Q
q
77 91 m
77 35 l
119 35 l
119 91 l
h
W
0 0 332 242 rc
0 -1 1 0 91.5 90 cm
0 6.5 m
52.835403 6.5 l
S
Q
q
77 91 m
77 35 l
119 35 l
119 91 l
h
W
97.269745 36.697701 m
97.673775 35.668705 98.330452 35.672817 98.732872 36.697701 c
100.90643 42.233364 l
101.31046 43.262356 100.84873 43.673656 99.883224 43.156364 c
99.755371 43.087864 l
98.786232 42.56863 97.211647 42.570572 96.246513 43.087864 c
96.118713 43.156364 l
95.149956 43.675598 94.693771 43.258247 95.096191 42.233364 c
97.269745 36.697701 l
h
W*
0 0 332 242 rc
89.949928 48.379837 m
89.949928 30.927494 l
106.05282 30.927494 l
106.05282 48.379837 l
h
f
Q
q
115 225 m
115 199 l
157 199 l
157 225 l
h
W
0 0 332 242 rc
0 -1 1 0 129.5 224 cm
0 6.5 m
22.928572 6.5 l
S
Q
q
115 225 m
115 199 l
157 199 l
157 225 l
h
W
135.26974 200.69769 m
135.67378 199.6687 136.33046 199.67282 136.73288 200.69769 c
138.90643 206.23337 l
139.31046 207.26236 138.84874 207.67366 137.88322 207.15637 c
137.75537 207.08786 l
136.78624 206.56863 135.21164 206.57057 134.24652 207.08786 c
134.11871 207.15637 l
133.14996 207.6756 132.69377 207.25824 133.09619 206.23337 c
135.26974 200.69769 l
h
W*
0 0 332 242 rc
127.94993 212.37984 m
127.94993 194.92749 l
144.05281 194.92749 l
144.05281 212.37984 l
h
f
Q
2 J
[
3
3
] 0 d
0.59200001 0.59200001 0.59200001 sc
q
0 0 332 242 rc
1 0 0 -1 13 127 cm
0 1 m
307 1 l
S
[] 0 d
0.60000002 0.60000002 0.60000002 sc
1 0 0 -1 176 187 cm
0 0.5 m
43 0.5 l
S
1 0 0 -1 93 225 cm
0 0.5 m
43 0.5 l
S
Q
2 w
0 J
[] 0 d
0 0 0 sc
q
16 238 m
90 238 l
91.656853 238 93 236.65686 93 235 c
93 214 l
93 212.34314 91.656853 211 90 211 c
16 211 l
14.343145 211 13 212.34314 13 214 c
13 235 l
13 236.65686 14.343145 238 16 238 c
h
W*
0 0 332 242 rc
1 0 0 -1 13 238 cm
3 0 m
77 0 l
78.656853 0 80 1.3431457 80 3 c
80 24 l
80 25.656855 78.656853 27 77 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 40 235 cm
/F1.1[ 13 0 0 -13 0 0]sf
0 14 m
(!"#)[ 11.581934 7.309961 0.000000 ] xS
Q
0.58039218 0.80392158 0.85882354 sc
q
-7.5 258.5 m
113.5 258.5 l
113.5 190.5 l
-7.5 190.5 l
h
16 237.5 m
90 237.5 l
91.380714 237.5 92.5 236.38071 92.5 235 c
92.5 214 l
92.5 212.61929 91.380714 211.5 90 211.5 c
16 211.5 l
14.619288 211.5 13.5 212.61929 13.5 214 c
13.5 235 l
13.5 236.38071 14.619288 237.5 16 237.5 c
h
16 238.5 m
14.067003 238.5 12.5 236.933 12.5 235 c
12.5 214 l
12.5 212.067 14.067003 210.5 16 210.5 c
90 210.5 l
91.932999 210.5 93.5 212.067 93.5 214 c
93.5 235 l
93.5 236.933 91.932999 238.5 90 238.5 c
16 238.5 l
h
W*
16 238 m
90 238 l
91.656853 238 93 236.65686 93 235 c
93 214 l
93 212.34314 91.656853 211 90 211 c
16 211 l
14.343145 211 13 212.34314 13 214 c
13 235 l
13 236.65686 14.343145 238 16 238 c
h
W*
0 0 332 242 rc
16 238 m
90 238 l
91.656853 238 93 236.65686 93 235 c
93 214 l
93 212.34314 91.656853 211 90 211 c
16 211 l
14.343145 211 13 212.34314 13 214 c
13 235 l
13 236.65686 14.343145 238 16 238 c
h
f
Q
0 0 0 sc
q
16 238 m
90 238 l
91.656853 238 93 236.65686 93 235 c
93 214 l
93 212.34314 91.656853 211 90 211 c
16 211 l
14.343145 211 13 212.34314 13 214 c
13 235 l
13 236.65686 14.343145 238 16 238 c
h
W*
0 0 332 242 rc
1 0 0 -1 13 238 cm
3 0 m
77 0 l
78.656853 0 80 1.3431457 80 3 c
80 24 l
80 25.656855 78.656853 27 77 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 41 234 cm
/F1.1[ 12 0 0 -12 0 0]sf
0.29550782 13 m
(!"#)[ 10.691016 6.747656 0.000000 ] xS
Q
q
16 117 m
90 117 l
91.656853 117 93 115.65685 93 114 c
93 93 l
93 91.343147 91.656853 90 90 90 c
16 90 l
14.343145 90 13 91.343147 13 93 c
13 114 l
13 115.65685 14.343145 117 16 117 c
h
W*
0 0 332 242 rc
1 0 0 -1 13 117 cm
3 0 m
77 0 l
78.656853 0 80 1.3431457 80 3 c
80 24 l
80 25.656855 78.656853 27 77 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 40 114 cm
/F1.1[ 13 0 0 -13 0 0]sf
0 14 m
(!"#)[ 11.581934 7.309961 0.000000 ] xS
Q
0.58039218 0.80392158 0.85882354 sc
q
-7.5 137.5 m
133.5 137.5 l
133.5 69.5 l
-7.5 69.5 l
h
16 116.5 m
110 116.5 l
111.38071 116.5 112.5 115.38071 112.5 114 c
112.5 93 l
112.5 91.619286 111.38071 90.5 110 90.5 c
16 90.5 l
14.619288 90.5 13.5 91.619286 13.5 93 c
13.5 114 l
13.5 115.38071 14.619288 116.5 16 116.5 c
h
16 117.5 m
14.067003 117.5 12.5 115.933 12.5 114 c
12.5 93 l
12.5 91.067001 14.067003 89.5 16 89.5 c
110 89.5 l
111.933 89.5 113.5 91.067001 113.5 93 c
113.5 114 l
113.5 115.933 111.933 117.5 110 117.5 c
16 117.5 l
h
W*
16 117 m
110 117 l
111.65685 117 113 115.65685 113 114 c
113 93 l
113 91.343147 111.65685 90 110 90 c
16 90 l
14.343145 90 13 91.343147 13 93 c
13 114 l
13 115.65685 14.343145 117 16 117 c
h
W*
0 0 332 242 rc
16 117 m
110 117 l
111.65685 117 113 115.65685 113 114 c
113 93 l
113 91.343147 111.65685 90 110 90 c
16 90 l
14.343145 90 13 91.343147 13 93 c
13 114 l
13 115.65685 14.343145 117 16 117 c
h
f
Q
0 0 0 sc
q
16 117 m
110 117 l
111.65685 117 113 115.65685 113 114 c
113 93 l
113 91.343147 111.65685 90 110 90 c
16 90 l
14.343145 90 13 91.343147 13 93 c
13 114 l
13 115.65685 14.343145 117 16 117 c
h
W*
0 0 332 242 rc
1 0 0 -1 13 117 cm
3 0 m
97 0 l
98.656853 0 100 1.3431457 100 3 c
100 24 l
100 25.656855 98.656853 27 97 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 51 113 cm
/F1.1[ 12 0 0 -12 0 0]sf
0.29550782 13 m
(!"#)[ 10.691016 6.747656 0.000000 ] xS
Q
q
99 200 m
173 200 l
174.65686 200 176 198.65686 176 197 c
176 176 l
176 174.34314 174.65686 173 173 173 c
99 173 l
97.343147 173 96 174.34314 96 176 c
96 197 l
96 198.65686 97.343147 200 99 200 c
h
W*
0 0 332 242 rc
1 0 0 -1 96 200 cm
3 0 m
77 0 l
78.656853 0 80 1.3431457 80 3 c
80 24 l
80 25.656855 78.656853 27 77 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 123 197 cm
/F1.1[ 13 0 0 -13 0 0]sf
0 14 m
(!"#)[ 11.581934 7.309961 0.000000 ] xS
Q
0.76862746 0.83529413 0.63529414 sc
q
75.5 220.5 m
196.5 220.5 l
196.5 152.5 l
75.5 152.5 l
h
99 199.5 m
173 199.5 l
174.38071 199.5 175.5 198.38071 175.5 197 c
175.5 176 l
175.5 174.61929 174.38071 173.5 173 173.5 c
99 173.5 l
97.619286 173.5 96.5 174.61929 96.5 176 c
96.5 197 l
96.5 198.38071 97.619286 199.5 99 199.5 c
h
99 200.5 m
97.067001 200.5 95.5 198.933 95.5 197 c
95.5 176 l
95.5 174.067 97.067001 172.5 99 172.5 c
173 172.5 l
174.933 172.5 176.5 174.067 176.5 176 c
176.5 197 l
176.5 198.933 174.933 200.5 173 200.5 c
99 200.5 l
h
W*
99 200 m
173 200 l
174.65686 200 176 198.65686 176 197 c
176 176 l
176 174.34314 174.65686 173 173 173 c
99 173 l
97.343147 173 96 174.34314 96 176 c
96 197 l
96 198.65686 97.343147 200 99 200 c
h
W*
0 0 332 242 rc
99 200 m
173 200 l
174.65686 200 176 198.65686 176 197 c
176 176 l
176 174.34314 174.65686 173 173 173 c
99 173 l
97.343147 173 96 174.34314 96 176 c
96 197 l
96 198.65686 97.343147 200 99 200 c
h
f
Q
0 0 0 sc
q
99 200 m
173 200 l
174.65686 200 176 198.65686 176 197 c
176 176 l
176 174.34314 174.65686 173 173 173 c
99 173 l
97.343147 173 96 174.34314 96 176 c
96 197 l
96 198.65686 97.343147 200 99 200 c
h
W*
0 0 332 242 rc
1 0 0 -1 96 200 cm
3 0 m
77 0 l
78.656853 0 80 1.3431457 80 3 c
80 24 l
80 25.656855 78.656853 27 77 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 95.5 195.5 cm
/F1.1[ 12 0 0 -12 0 0]sf
20.586329 13 m
($%&''\(\))[ 7.632422 6.970312 6.970312 4.292578 4.292578 3.173437 0.000000 ] xS
Q
q
129 79 m
203 79 l
204.65686 79 206 77.656853 206 76 c
206 55 l
206 53.343147 204.65686 52 203 52 c
129 52 l
127.34315 52 126 53.343147 126 55 c
126 76 l
126 77.656853 127.34315 79 129 79 c
h
W*
0 0 332 242 rc
1 0 0 -1 126 79 cm
3 0 m
77 0 l
78.656853 0 80 1.3431457 80 3 c
80 24 l
80 25.656855 78.656853 27 77 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 153 76 cm
/F1.1[ 13 0 0 -13 0 0]sf
0 14 m
(!"#)[ 11.581934 7.309961 0.000000 ] xS
Q
0.76862746 0.83529413 0.63529414 sc
q
105.5 99.5 m
226.5 99.5 l
226.5 31.5 l
105.5 31.5 l
h
129 78.5 m
203 78.5 l
204.38071 78.5 205.5 77.380714 205.5 76 c
205.5 55 l
205.5 53.619289 204.38071 52.5 203 52.5 c
129 52.5 l
127.61929 52.5 126.5 53.619289 126.5 55 c
126.5 76 l
126.5 77.380714 127.61929 78.5 129 78.5 c
h
129 79.5 m
127.067 79.5 125.5 77.932999 125.5 76 c
125.5 55 l
125.5 53.067005 127.067 51.5 129 51.5 c
203 51.5 l
204.933 51.5 206.5 53.067005 206.5 55 c
206.5 76 l
206.5 77.932999 204.933 79.5 203 79.5 c
129 79.5 l
h
W*
129 79 m
203 79 l
204.65686 79 206 77.656853 206 76 c
206 55 l
206 53.343147 204.65686 52 203 52 c
129 52 l
127.34315 52 126 53.343147 126 55 c
126 76 l
126 77.656853 127.34315 79 129 79 c
h
W*
0 0 332 242 rc
129 79 m
203 79 l
204.65686 79 206 77.656853 206 76 c
206 55 l
206 53.343147 204.65686 52 203 52 c
129 52 l
127.34315 52 126 53.343147 126 55 c
126 76 l
126 77.656853 127.34315 79 129 79 c
h
f
Q
0 0 0 sc
q
129 79 m
203 79 l
204.65686 79 206 77.656853 206 76 c
206 55 l
206 53.343147 204.65686 52 203 52 c
129 52 l
127.34315 52 126 53.343147 126 55 c
126 76 l
126 77.656853 127.34315 79 129 79 c
h
W*
0 0 332 242 rc
1 0 0 -1 126 79 cm
3 0 m
77 0 l
78.656853 0 80 1.3431457 80 3 c
80 24 l
80 25.656855 78.656853 27 77 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 125.5 74.5 cm
/F1.1[ 12 0 0 -12 0 0]sf
20.086329 13 m
($%&''\(\))[ 7.632422 6.970312 6.970312 4.292578 4.292578 3.173437 0.000000 ] xS
Q
q
182 162 m
256 162 l
257.65686 162 259 160.65686 259 159 c
259 138 l
259 136.34314 257.65686 135 256 135 c
182 135 l
180.34314 135 179 136.34314 179 138 c
179 159 l
179 160.65686 180.34314 162 182 162 c
h
W*
0 0 332 242 rc
1 0 0 -1 179 162 cm
3 0 m
77 0 l
78.656853 0 80 1.3431457 80 3 c
80 24 l
80 25.656855 78.656853 27 77 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 206 159 cm
/F1.1[ 13 0 0 -13 0 0]sf
0 14 m
(!"#)[ 11.581934 7.309961 0.000000 ] xS
Q
0.98039216 0.83529413 0.42745098 sc
q
158.5 182.5 m
279.5 182.5 l
279.5 114.5 l
158.5 114.5 l
h
182 161.5 m
256 161.5 l
257.38071 161.5 258.5 160.38071 258.5 159 c
258.5 138 l
258.5 136.61929 257.38071 135.5 256 135.5 c
182 135.5 l
180.61929 135.5 179.5 136.61929 179.5 138 c
179.5 159 l
179.5 160.38071 180.61929 161.5 182 161.5 c
h
182 162.5 m
180.067 162.5 178.5 160.933 178.5 159 c
178.5 138 l
178.5 136.067 180.067 134.5 182 134.5 c
256 134.5 l
257.93298 134.5 259.5 136.067 259.5 138 c
259.5 159 l
259.5 160.933 257.93298 162.5 256 162.5 c
182 162.5 l
h
W*
182 162 m
256 162 l
257.65686 162 259 160.65686 259 159 c
259 138 l
259 136.34314 257.65686 135 256 135 c
182 135 l
180.34314 135 179 136.34314 179 138 c
179 159 l
179 160.65686 180.34314 162 182 162 c
h
W*
0 0 332 242 rc
182 162 m
256 162 l
257.65686 162 259 160.65686 259 159 c
259 138 l
259 136.34314 257.65686 135 256 135 c
182 135 l
180.34314 135 179 136.34314 179 138 c
179 159 l
179 160.65686 180.34314 162 182 162 c
h
f
Q
0 0 0 sc
q
182 162 m
256 162 l
257.65686 162 259 160.65686 259 159 c
259 138 l
259 136.34314 257.65686 135 256 135 c
182 135 l
180.34314 135 179 136.34314 179 138 c
179 159 l
179 160.65686 180.34314 162 182 162 c
h
W*
0 0 332 242 rc
1 0 0 -1 179 162 cm
3 0 m
77 0 l
78.656853 0 80 1.3431457 80 3 c
80 24 l
80 25.656855 78.656853 27 77 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 198.5 158 cm
/F1.1[ 12 0 0 -12 0 0]sf
0.22382815 13 m
(*\)+&,\))[ 8.101172 6.495703 6.970312 6.970312 6.519141 0.000000 ] xS
1 0 0 -1 83 33 cm
/F1.1[ 13 0 0 -13 0 0]sf
0 14 m
(!"#)[ 11.581934 7.309961 0.000000 ] xS
Q
0.98039216 0.83529413 0.42745098 sc
q
-7.5 56.5 m
230.5 56.5 l
230.5 -11.5 l
-7.5 -11.5 l
h
16 35.5 m
207 35.5 l
208.38071 35.5 209.5 34.380711 209.5 33 c
209.5 12 l
209.5 10.619288 208.38071 9.5 207 9.5 c
16 9.5 l
14.619288 9.5 13.5 10.619288 13.5 12 c
13.5 33 l
13.5 34.380711 14.619288 35.5 16 35.5 c
h
16 36.5 m
14.067003 36.5 12.5 34.932995 12.5 33 c
12.5 12 l
12.5 10.067003 14.067003 8.5 16 8.5 c
207 8.5 l
208.933 8.5 210.5 10.067003 210.5 12 c
210.5 33 l
210.5 34.932995 208.933 36.5 207 36.5 c
16 36.5 l
h
W*
16 36 m
207 36 l
208.65686 36 210 34.656853 210 33 c
210 12 l
210 10.343145 208.65686 9 207 9 c
16 9 l
14.343145 9 13 10.343145 13 12 c
13 33 l
13 34.656853 14.343145 36 16 36 c
h
W*
0 0 332 242 rc
16 36 m
207 36 l
208.65686 36 210 34.656853 210 33 c
210 12 l
210 10.343145 208.65686 9 207 9 c
16 9 l
14.343145 9 13 10.343145 13 12 c
13 33 l
13 34.656853 14.343145 36 16 36 c
h
f
Q
0 0 0 sc
q
16 36 m
207 36 l
208.65686 36 210 34.656853 210 33 c
210 12 l
210 10.343145 208.65686 9 207 9 c
16 9 l
14.343145 9 13 10.343145 13 12 c
13 33 l
13 34.656853 14.343145 36 16 36 c
h
W*
0 0 332 242 rc
1 0 0 -1 13 36 cm
3 0 m
194 0 l
195.65686 0 197 1.3431457 197 3 c
197 24 l
197 25.656855 195.65686 27 194 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 53 32 cm
/F1.1[ 12 0 0 -12 0 0]sf
38.223827 13 m
(*\)+&,\))[ 8.101172 6.495703 6.970312 6.970312 6.519141 0.000000 ] xS
1 0 0 -1 208 237 cm
0.10468766 13 m
(-./0/1"\(2!"#*\)+&,\))[ 8.329687 4.263281 3.173437 6.970312 3.173437 6.970312 6.747656 3.173437 3.132422 10.691016 6.747656 6.970312 8.101172 6.495703 6.970312 6.970312 6.519141 0.000000 ] xS
1 0 0 -1 220 116 cm
0 13 m
(3\("4\)2!"#*\)+&,\))[ 7.819922 3.173437 6.747656 6.091406 6.495703 3.132422 10.691016 6.747656 6.970312 8.101172 6.495703 6.970312 6.970312 6.519141 0.000000 ] xS
Q
0.84705883 0.58431375 0.56470591 sc
q
266.5 68.5 m
266.5 18.5 l
198.5 18.5 l
198.5 68.5 l
h
245.5 45 m
245.5 42 l
245.5 40.619289 244.38071 39.5 243 39.5 c
222 39.5 l
220.61929 39.5 219.5 40.619289 219.5 42 c
219.5 45 l
219.5 46.380711 220.61929 47.5 222 47.5 c
243 47.5 l
244.38071 47.5 245.5 46.380711 245.5 45 c
h
246.5 45 m
246.5 46.932995 244.933 48.5 243 48.5 c
222 48.5 l
220.067 48.5 218.5 46.932995 218.5 45 c
218.5 42 l
218.5 40.067005 220.067 38.5 222 38.5 c
243 38.5 l
244.933 38.5 246.5 40.067005 246.5 42 c
246.5 45 l
h
W*
246 45 m
246 42 l
246 40.343147 244.65686 39 243 39 c
222 39 l
220.34314 39 219 40.343147 219 42 c
219 45 l
219 46.656853 220.34314 48 222 48 c
243 48 l
244.65686 48 246 46.656853 246 45 c
h
W*
0 0 332 242 rc
246 45 m
246 42 l
246 40.343147 244.65686 39 243 39 c
222 39 l
220.34314 39 219 40.343147 219 42 c
219 45 l
219 46.656853 220.34314 48 222 48 c
243 48 l
244.65686 48 246 46.656853 246 45 c
h
f
Q
0 0 0 sc
q
246 45 m
246 42 l
246 40.343147 244.65686 39 243 39 c
222 39 l
220.34314 39 219 40.343147 219 42 c
219 45 l
219 46.656853 220.34314 48 222 48 c
243 48 l
244.65686 48 246 46.656853 246 45 c
h
W*
0 0 332 242 rc
0 -1 -1 0 246 48 cm
3 0 m
6 0 l
7.6568542 0 9 1.3431457 9 3 c
9 24 l
9 25.656855 7.6568542 27 6 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
Q
q
0 0 332 242 rc
1 0 0 -1 252 52.5 cm
/F1.1[ 11 0 0 -11 0 0]sf
0.98281252 12 m
(5%.\)"+2,",%\))[ 3.940234 6.389453 3.805957 5.954395 6.185352 6.389453 2.871387 5.975879 6.185352 5.975879 6.389453 0.000000 ] xS
Q
0.84705883 0.58431375 0.56470591 sc
q
49 99.5 m
99 99.5 l
99 31.5 l
49 31.5 l
h
72.5 78.5 m
75.5 78.5 l
76.880714 78.5 78 77.380714 78 76 c
78 55 l
78 53.619289 76.880714 52.5 75.5 52.5 c
72.5 52.5 l
71.119286 52.5 70 53.619289 70 55 c
70 76 l
70 77.380714 71.119286 78.5 72.5 78.5 c
h
72.5 79.5 m
70.567001 79.5 69 77.932999 69 76 c
69 55 l
69 53.067005 70.567001 51.5 72.5 51.5 c
75.5 51.5 l
77.432999 51.5 79 53.067005 79 55 c
79 76 l
79 77.932999 77.432999 79.5 75.5 79.5 c
72.5 79.5 l
h
W*
72.5 79 m
75.5 79 l
77.156853 79 78.5 77.656853 78.5 76 c
78.5 55 l
78.5 53.343147 77.156853 52 75.5 52 c
72.5 52 l
70.843147 52 69.5 53.343147 69.5 55 c
69.5 76 l
69.5 77.656853 70.843147 79 72.5 79 c
h
W*
0 0 332 242 rc
72.5 79 m
75.5 79 l
77.156853 79 78.5 77.656853 78.5 76 c
78.5 55 l
78.5 53.343147 77.156853 52 75.5 52 c
72.5 52 l
70.843147 52 69.5 53.343147 69.5 55 c
69.5 76 l
69.5 77.656853 70.843147 79 72.5 79 c
h
f
Q
0 0 0 sc
q
72.5 79 m
75.5 79 l
77.156853 79 78.5 77.656853 78.5 76 c
78.5 55 l
78.5 53.343147 77.156853 52 75.5 52 c
72.5 52 l
70.843147 52 69.5 53.343147 69.5 55 c
69.5 76 l
69.5 77.656853 70.843147 79 72.5 79 c
h
W*
0 0 332 242 rc
1 0 0 -1 69.5 79 cm
3 0 m
6 0 l
7.6568542 0 9 1.3431457 9 3 c
9 24 l
9 25.656855 7.6568542 27 6 27 c
3 27 l
1.3431457 27 0 25.656855 0 24 c
0 3 l
0 1.3431457 1.3431457 0 3 0 c
h
S
ep
end
